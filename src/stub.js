export const content = {
    titleFirst: 'Привет!',
    content: 'Меня зовут Иван! Я начинающий web разработчик, это мой проект портфолио, ту вы найдете мои измышления на тему разработки и тестирования. Мой опыт работы в сфере IT и прошлые',


}

export const titleSideBar = {
    title: 'Краткий перечень навыков'
}
export const news = [
    {
        title: 'Тестирование',
        content: 'Мои инструменты тестирования...',
        link: '/testing'

    },
    {
        title: 'Разработка',
        content: 'Мои инструменты разработки....',
        link:'/development'

    },
    {
        title: 'Другие Инструменты',
        content: 'Инструменты, которые, я использую на стыке специализаций...',
        link: '/tools'
    }

]

export const themes = [
    {
        title: 'registration-form',
        link: "https://react-registration-form-alpha.vercel.app/"
    },
    {
        title: 'cardHolder-form',
        link: "https://card-form-frontender-mentor.vercel.app/"
    },
    {
        title: 'e-commerce',
        link: '#'
    }

]

export const footer = {
    content: 'Site have been developed off React-JS, by GB Student. Have been used public figma-design'
}

export const testing =
    {
        title: 'Тестирование приложений',
        content: 'Тестирование демонстрирует наличие дефектов, заблуждение об отсутствии ошибок, отсутствие ошибок не означает что их нет и наша задача выявить их в нашем продукте, или проекте как можно быстрее и устранить (пофиксить).\n' +
            'Итак Тестирование это процесс проверки на соответствие фактической реализации к заявленной. ',
        unit: 'Начнем с того, что тестирование в современных проектах начинается на этапе разработки. \n' +
                'Возьмем клиент серверное приложение, по типу интернет магазин. Так вот на этапе разработки программист, делает юнит тестирование (тестирование модуля, компонента, изолированного участка функциональности), для того чтоб доказать (отчитаться), что он выполнил бизнес требования, а также чтоб убедится, что код выполняется и его можно использовать, кроме того не очевидным является тот факт что разработчик в процессе написания тестов, четко понимает, как работает его код. Этот процесс (юнит тестирование) связан с изоляцией модуля, написанием заглушек (фейковых данных), интерцепторов (шпионов), которые будут регистрировать/логировать обращения к связанным модулям. ',
        nextTitle: 'Функциональное тестирование',
        smoke: 'Дымовое тестирование (smoke test) проводится при появлении нового билда, направленного на проверку готовности продукта к проведению расширенного тестирования и определение общего качества продукта, дает ответ готово ли приложение к выполнению основных функции или нет. ',
        integration: 'Тестирование критического пути (critical path) подразумевает проверку стандартного пути пользователя для выполнения бизнес логики, или типичных пользовательских сценариев (например создание ордера в интеренет магазине или маркет плейсе, использование встроенного функционала в том или ином приложении по добавлении статьи, картинки и тд), является частью интеграционного сьюта. ',
        extend: "Расширенное тестирование (extended) подразумевает как позитивные и негативные тесты, прохождение наиболее полного пути пользовательских сценариев.\n" +
            "Требует проработки и создания большого объема тест-кейсов на интеграцию.",
        regression: 'Регрессионное (regression testing)  проводится, при появлении нового функционала в процессе использования, или выполнении заявленного функционала на последующих итерациях. Часто подлежит автоматизации.',
        documentation: 'На всех этапах функционального тестирования ведется документация, на этапе смоук тестирования составляется чек-лист проверки, на последующих этапах составляются тест кейсы, на основе техник тест дизайна: проверок граничных значений,  использование наборов эквивалентных данных, которые обрабатываются в приложении, проверок заявленной в требованиях функциональности, применяются позитивные и негативные подходы.',
        toolsManualTitle: "Инструменты Ручного тестирования.",
        uiTesting: 'Отличным инструментом тестирования UI инструменты разработчика браузера (dev-tools)\n' +
            'в девтулс, вы можете увидеть какие запросы клиент шлет на сервер, какие ответы оттуда возвращаются, что хранит приложение в локальном хранилище (localstorge), дополнительные расширения для браузера позволяют вам отслеживать состояние например redux-dev-tools, если разработчики подключили эту возможность. ',
        backTesting: 'Тестирование Бекенда предполагает наличие возможностей отправки запросов на сервер, в JSON формате и для этих целей отлично подходит Postman, позволяет хранить историю запросов.\n' +
            'В любой момент вы можете с его помощью обратиться к API, и увидеть что вернет вам сервер, статус и сигнатуру ответа вы будете валидировать вручную согласно документации.',
        testingDb: 'В некоторых тестах вам потребуется сделать проверку на наличие значений данных в БД, и для подключения к БД, оптимально использовать готовые решения например DataGrip или Intrlij Idea, где вы можете настроить соединение и обращаться к базе запросами без веб интерфейса. \n' +
            'Для проверки напрмер Mongo DB можно использовать легкий клиент Compass.',
        autoTitle: 'Инструменты тестирования без контейнеризации настройки pipeline',
        autoToolsCypress: 'Отличным и современным инструментом тестирования UI — является cypress данный фреймворк позволяет писать тесты на javascript, typescript, работает с xpath, имеет встроенный сервер позволяющий отслеживать прохождения тестов. Имеет возможность самостоятельно делать запросы put, get и др. запросы, поддерживает возможность хранения и перехватывания моковых данных и др. Работает в синхронном режиме.  ',
        autoToolsPlaywright: 'Тестовый фрейморк Playwright — позволят писать тесты на javascript и typescript, по умолчанию работает в асинхронном режиме. Имеет ряд встроенных собственных селекторов, например может искать поля формы по placeholder, xpath и др. позволяет запускать тесты в режиме отсутствия графического интерфейса, позволяет проверять значения в localstorage, позволяет логировать шаги, делать скриншоты, записывать видео. ',
        backendTools: 'Тестирование Бекенда и БД, можно осуществлять на фреймворках junit (java), pytest (python), на этих фреймворках вы без труда сможете сделать свой собственный tools, для валидации сигнатуры JSON, обращений к БД, и утверждения ее данных. ',
        TestingDocumentation: 'Для поддержи документации по тестам можно использовать office enterprise 2016, или старше позволяет работать над документом в режимах правки нескольким пользователям. \n' +
            'Для регистрации ошибок и отслеживании задач, часто используется jira, но могут встречаться и самописные трекеры.   '

    }

export const development =
    {
        title: 'Разработка.',
        intro: 'Итак представим себе, что мы решили что-то разработать, и даже есть некий заказчик, который к примеру просит нас, переделать его сайт. Вроде как бы существует наличие каких то бизнес требований, но далее, мы должны собрать, дополнительные требования, например на какой платформе, будет хостится, наш заказчик (уже хостится), требуется ли обновление его контентной части и как часто это будет происходить, какие возможные изменения, с учетом времени, будут вносится в последствии. Это с точки зрения Бизнеса, а сточки зрения разработки, нам надо декомпозировать каждое требование на отдельные маленькие требования и понять приблизительно, сколько займет процесс разработки, тестирования, деплоя. И на этом основании мы можем выбрать использовать ли бекенд, или нет если использовать, то декомпозировать задачи под бекенд, оценить по времени сколько займет разработка бекенда, как мы будем хранить данные, для этого проекта.',
        backEndTitle:'Начнем с создания бекенда.',
        backIntro: 'Итак наша задача создать для заказчика возможность, самостоятельно добавлять контент на сайт, при помощи административной панели. Значит нам нужен некий ендпоинт который будет принимать POST запросы от клиента с какой-то сигнатурой например `{id:2342, title: Some title, content: Some text, img: imageName}` , там этот объект валидировать, сохранять и возвращать статус и (или не) возвращать новое состояние JSON на клиент. Благо современные web фрейморки под популярные ЯП, это умеют (spring-Java, django-python, laravel-php, njdejs-javascript и др.) и обеспечивают архитектуру MVC приложений.\n' +
            'И тут возникает несколько узких участков, это шифрование пароля, проверка сессии, прокидывание formData файлами изображений, хранение данных, и последний это деплой, но о нем позже.  ',
        backScript: 'Итак Шифрование пароля, для этих целей, одним из популярных решений, может служить хорошее решение использование bcrypt, который шифрует в одном направлении и сохраняется хеш пароля в БД и далее, когда пользователь заходит в систему шифруется его пароль и эти 2 хеша сравниваются между собой, что обеспечивает механизм авторизации.',
        backSession: 'Проверка сессии также в последнее время широко применяется, jsonwebtoken, более 10млн. загрузок в неделю. Данные механизм позволяет закрыть 90% требований по соблюдении чистоты сессии. https://www.npmjs.com/package/jsonwebtoken  ',
        backImg: 'Работа с изображениями это отдельная холиварная тема, сейчас модно хранить изображения в облачном хранилище и во время например обновления, эти изображения вы можете прокидывать не на ваш сервер, а с помощью, api облака заголовком formData отправить его в ваш ЛК например https://www.npmjs.com/package/cloudinary, что делает например около 200 тысяч разработчик в неделю.',
        storageDataTitle: 'Хранение данных. ',
        storageData: 'Да безусловно, самым популярным решением тут является SQL-server, и тогда придется завязываться на ORM модели иметь процедуры сложных миграций, механизмов удаления связанных моделей, например для интернет-магазинов, и высокой стоимости архитектуры.\n' +
            'И в этой связи, как в ногу со временем шагают БД не имеющих связанных моделей. Принцип работы и ее сила в том, что данные хранятся в виде документов, значений в неких полях. \n' +
            'Проанализировав структуру данных вашего приложения, вы сможете понять, что данные также, можно хранить в документо подобным стилем, причем механизм реализации подобен методам в браузере, вы используете например метод create(), передаете сигнатуру с данными, и БД ожидает события create, получает параметры и создает документ в виде JSON, причем действия происходят в асинхронном режиме что обеспечивает производительность сервера.  Кроме того, напрмер Mongo DB имеет возможность предоставлять, облачное хранилище данных, что обеспечивает работоспособность вашего бекенда, независимо от конкретного   host провайдера, что дает вам невероятную гибкость и другие замечательные возможности.',
        frontEndTitle: 'Клиентская часть. ',
        frontEndPart: 'В последнее время в среде разработки и создания веб приложений популярным стал подход, в создании одностраничных решений, поведение которого, почти максимально эмулируют поведение desktop приложений, что делает их более интерактивными увлекательными и интересными, где пользователю приятно получать контент. \n' +
            'И в этой связи сложилась картина из доминирования 3ех решений: это реализация от Facebook - React, продукт от Google - Angular и продукт независимых JS разработчиков команды VUE. Данные библиотеки решают целый ряд проблем, например упаковки файлов в готовый проект, реализацию все в одном рабочем окне где у вас и стили и разметка и js соединены в одно целое. Кроме того разработчик, без необходимости, может не иметь дело напрямую с DOM деревом, не использовать селекторы доступа и не совершать манипуляции с ним. Из коробки эти решения имеют виртуальную DOM модель, которая синхронизируется с реальной и производит рендеринг при изменении состояния.\n' +
            'Состояние, может хранится посредством самого фрейморка, так и использовать специальные стейт менеджеры. Доступ к данным из такого бокса служат промисы, которые также можно отправлять при помощи middleware стейт менеджера.\n' +
            'Такой подход обеспечивает, высокую скорость обработки данных, особенно, для нагруженных серверов, например бекенда мобильного приложения.  Кроме того, решения стейт менеджера позволяет, легко получать доступ к данным внутри клиентского приложения из любого компонента, вместо например дрилинга пропсов при декомпозиции компонентов и колбеков для передачи состояния. Что также обеспечивает возможности создания переиспользуемых участков кода, создает лаконичный легко читаемый и легко поддерживающий код, который не будет вам причинять боль, при его дальнейшей эксплуатации.',
        deployTitle: 'Деплой проекта',
        deploy:'И теперь про деплой. отлично когда у вас есть vps, вы быстренько закините все в докер, зараните его там сделаете мапинг портов и вуаля деплой закончился. И вот примерно так и надо рассуждать когда речь идет о деплои nodejs и (или) react приложений, для деплоя вам надо будет настроить конфиг, чтоб он установил все зависимости, а после стартанул и подхватил наш билд, а базу мы добавим из облачного AtlasmongoDB.'

    }

export const tools =
    {
        title: 'Смежные инструменты.',
        firstSmallTitle: 'VS code.',
        descriptionVsCode: 'Vs code стал самым популярным редактором кода, его облегченная версия, очень проста и удобна в использовании. Редактор поддерживает большинство ЯП, есть большое кол-во расширений, например liveserver, для гибкой разработки верстки с использованием JS, CSS, сервер TomCat для отладки и тестирования java spring, (vue, angukar, react)-snippets, Django-jinja, Search Node Modules, SQL, JSON и многое другое. VSC имеет возможность запускать терминал и выполнять команды, структурировано отображать файлы проекта, сплитить файлы, имеет богатую библиотеку графических тем. ',
        gitTitle: 'GitHub.',
        gitDescription: 'Безусловно одним из главных инструментов тестирования и разработки, является github, который в последнее время, значительно расширил свой базовый функционал. И теперь позволяет не только хранить разработчикам исходники, тестировщикам тесты, но и гитхаб позволяет вам автоматизировать сборку, тестирование, развертывание ваших приложений при помощи настройки yml конфига, без поднятия серверов типа Jenkins.',
        gitConfig:'Создается конфиг и  в нем можно указать, по какому тригеру будет происходить выполнение  джоб, например коммит в мейн, или какой-то выбранный бранч, сами джобы, также добавляются через конфиг, есть возможность создать очередность выполнения джоб, или выполнить зависимости, например джоба2 — не выполняется при условии, что джоба 1 не отработала, также можно указать, для кого-го хеша коммита, выполнять джобы, например клонировать репозиторий бекенда, с высотой хеша от 3 мая, а высота хеша клиента от 6 мая. Джобы выполняются на ранере в докер контейнере.',
        dockerTitle: 'Docker.',
        dockerDescription: 'Безусловно, докер прочно вошел в разработку и тестирование приложений. Например вы можете писать клиент, потом сделать сборку и не ставить в систему nginx локально, а например использовать публичный образ nginx контейнера, запустить его и с помощью мапинга томов и портов прокинуть ему ваш билд и поднять например на порту 8080, также можно сделать и с бекендом, таким образом вы сможете полностью протестировать деплой вашего fullstack приложения, докер также выполнит npm install -all, запустит сервер найдет, что у него продакшн мод, перейдет в папку с клиентом и запустит клиентский билд. ',
        postmanTitle:'Postman',
        postmanDescription: 'Отличным инструментом разработки и тестирования rest api приложений является Postman. Postman позволяет вам делать запросы браузерных методов к любому url, получать ответы, возвращать статус код, транслировать сигнатуры возвращаемых объектов, хранить историю для отдельных урлов, есть возможность использовать различные заголовки (headers)для передачи графических данных, добавлять свои заголовки например Заголовки для авторизации и также позволяет делать запросы под GraphQl.',
        figmaTitle: 'Figma',
        figmaDescription:'Отличным решением для работы с макетами стала Figma, которая появилась в последнее время и практически полностью вытеснила продукт от компании Adobe. Для разработчика figma, проста и удобна в использовании в ней вы можете шарить макеты между участниками команды. В процессе верстки вы имеете доступ ко всем элементам макета, можете получить цвета макета, то какими их задумал дизайнер, также figma вам отобразит отступы в пикселях между блоками, между блоками и краями макета и много другое, figma имеет свое приложение для популярных ОС.  '
    }

export const skills =
    {
        firstDate: 'Август 2008 — Июль 2012',
        firstTitle: 'ООО Атлант Лифт Сервис',
        firstPosition:'Сисиемный Администратор',
        firstDescription: 'Поддержание IT инфраструктуры работа с 1С БД, монтаж ЛВС сетей, систем видеонаблюдения, locker, развитие сайта, составление тех документации для работников по работе с ПО под MS, спецсофта (АСУД) по автоматизации управления эксплуатации инженерных систем.\n' +
            'Win7-R2011, работал с html, css, javascript(Dreamviewer) верстка для сайта компании, ведение рекламной компании, отчетность.',

        secondDate: 'Март 2012 — Сентябрь 2016',
        secondTitle: 'Группа компаний "Калита',
        secondPosition: 'Системный администратор',
        secondDescription: 'Администрирование сетей и оборудования предприятия,\n' +
            'создание, администрирование, seo продвижение сайтов компании, ведение рекламных компаний, архивирование, репликация 1С, БД. Использовал nginx + mysql, Bitrix php -framework, python django, ubuntu bind (dns/dhcp), postfix.',

        thirdDate: 'Декабрь 2016 — Октябрь 2019',
        thirdTitle:'Orbit Trade Strartup',
        thirdPosition: 'QA Engineer',
        thirdDescription: 'Функциональное, регрессионное, интеграционное тестирование продукта, трекинг дефектов в bug-track, контроль фиксации задач по исправлениям со стороны разработчика. Создание и трекинг тестовых сценариев, создание и ведение документации по продукту на анализ биржевых индикаторов. Создание и тестирование торговых стратегий на основе разрабатываемого продукта - инструмента для получения прибыльных стратегий на спотовых рынках MOEX, BATS, Binance и др. Создание адаптивных парсеров для отслеживания информационного фона, наблюдаемых тикеров. Сбор и анализ торговых данных api - json (market data), рендеринг графиков и создание автоскриншотов. Создание информеров на базе telegram каналов. Сбор и анализ логов. ',

        fifthDate: 'Май 2020 — Сентябрь 2020',
        fifthTitle: 'Фриланс подработка',
        fifthPosition: 'Web-разработчик',
        fifthDescription: 'Разработка системы автоматизации документооборота для ведения хоз. деятельности предприятия: стек данных google table, методы: фильтрация, хранение, обновление реализация python3, БД (sqlite), fetch data: xls + google table+bitrixAPI для бухгалтерии и отдела снабжения. Заказная разработка под мобильные платформы в Andriod studio на kotlin Создание телеграмм ботов и их контента на python3 (telebot, re, requests, sqlite)+ selenium для получения изображений.',

        sixthData: 'Октябрь 2020 — Апрель 2021',
        sixthTitle: 'Мастер-Домино',
        sixthPosition: 'Тестировщик ПО',
        sixthDescription: 'Проектная работа. Составление Тестовых Сценариев для Системы Электронного Документооборота CMJ - заказчик РСХБ.\n' +
            'Заведение, регистрация, исполнение, контроль, подписание ЭП, рецензирование, пролонгация, передача дел от ГО, РФ, РП, взамодействие с внешними ИС (Спарк, ИФНС, ЛК БР), далеко не полный список возможностей Системы.\n' +
            'Задания в Jira, Документация Confluence.',

        seventhDate: 'январь 2022 — январь 2023. ',
        seventhTitle: 'Фриланс подработка',
        seventhPositions: 'Начинающий Web-разработчик.',
        seventhDescription: 'Разработка на python Django3, MySQL(ORM), создание лендингов, интеренет магазинов. \n' +
            'Заказная адаптивная верстка по шаблону на чистом CSS3, создание frontend HTML+ JS. \n' +
            'Заказная разработка клиентских приложений на React-js, разработка fullstack приложений на Node.js Express,  MongoDB.     \n' +
            'E2E Playwright? Cypress тестирование клиентской части. Составление тестов, согласно требованиям документации (селекторы, заполнение форм,  утверждения, логирование скриншоты), без использования pipeline.  \n' +
            'Pytest тестирование бекенда nodeJs, запросы,  валидация JSON, обработка статусов. ',
    }

    export const skillsCut = {
        title:'Навыки',
        colOne: 'Postman',
        colTwo: 'Git',
        colThree: 'SQL',
        colFour: 'PlayWright',
        colFive: 'Pytest',
        colSix: 'Cypress',
        colSeven: 'Python',
        colEight: 'JavaScript',
        colNine: 'TypeScript',
        colTen: 'React-js',
        colEleven: 'CSS',
        colTwelve: 'HTML',
        colThirteen: 'Doker'

    }